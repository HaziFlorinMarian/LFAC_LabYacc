int @x := 2;
const int @y := 2;
int @z := (@x / 2) + 5;
int @zz := @x + (3 * 2 / 4);
int @zzz := (@x + (4 * 5));
int @v[50];
int @vec0[1000];
bool @vec1[50];
char @vec2[100];
string @vec3[1000];
int @a := 5;
int @b := 6;

int @f(int @param1, float @param2, char @param3)
--begin_function
bool @florin := 1;
char @mno;
if @a > (@b + 3) && (@y + 3 * 5 -(7 + @a) || @x)  
--begin_stmt
    int @var1 := 5;
    int @var2 := 5;
--end_stmt;   
--end_function;

int @gh()
--begin_function
bool @florin := 1;
char @mno;
if @a > (@b + 3) && (@y + 3 * 5 -(7 + @a) || @x)  
--begin_stmt
    int @var1 := 5;
    int @var2 := 5;
--end_stmt;   
--end_function;

void @k(int @a)
--begin_function
if 1 <= 2
--begin_stmt
    int @var3 := 5;
    int @var4 := 5;
--end_stmt;   
int @radu := 100;
--end_function;

class @cars2000
--begin_class
    int @cq:=5;
    
    int @HFM(int @xyz)
    --begin_function
    float @hazi := 5;
    --end_function;
private
    bool @cx;
    const int @cy := 2;
    int @cz := 50;
protected
    int @ca;
--end_class @class1;


int @g()
--begin_function
if 1 <= 2

--begin_stmt
    int @var5 := 5;
    int @var6 := 5;
--end_stmt;   
int @z2 := 50;
return @z2;
--end_function;


begin_progr

@f(5, 3+7, @g());

int @c := 1;
@c := 7;

@zzz := 1;

@zzz := 17 + 5;

if 1 <= 2
--begin_stmt
    int @var7 := 5;
    int @var8 := 5;
--end_stmt;   

if 3 != 4
--begin_stmt
    int @var9 := 6;
    @var9 := 6;
--end_stmt;

while 3 < 10
--begin_stmt
    int @var3;
    int @var11 := @var3 + 3;
    int @var12 := @var3 * @var11;
--end_stmt;

int @var13 := 0;
int @i;

for @i := 1; @i < 10; @i := @i + 2:
--begin_stmt
    int @var4;
    int @var14;
    int @var1;
    @var14 := @var4 + 5 * @var1;
--end_stmt;

end_progr